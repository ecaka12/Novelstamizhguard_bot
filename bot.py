# bot.py - @novelstamizhguard_bot
# Voice verification bot for Tamil Novels group
# Fixed for Telethon v1.24+ | No ChatJoinRequest needed

import os, io, asyncio, logging
from datetime import datetime, timezone
from telethon import TelegramClient, events, errors
from telethon.tl import types
from telethon.tl.custom import Button
from pymongo import MongoClient

# Optional: pydub for voice analysis
try:
    from pydub import AudioSegment
    HAS_AUDIO = True
except ImportError:
    HAS_AUDIO = False
    print("Warning: pydub not found. Voice analysis disabled.")

# ---------------- Logging ----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO # Consider DEBUG for troubleshooting
)
logger = logging.getLogger(__name__)

# ---------------- Config ----------------
class Config:
    API_ID = int(os.getenv("API_ID"))
    API_HASH = os.getenv("API_HASH")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    MONGO_URI = os.getenv("MONGO_URI")
    GROUP_ID = int(os.getenv("GROUP_ID"))  # -100...
    TOPIC_ID = int(os.getenv("TOPIC_ID", "0")) # Default to 0 if not set
    MODLOG_CHAT = int(os.getenv("MODLOG_CHAT"))
    ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]
    TIMEOUT = int(os.getenv("TIMEOUT", "7200"))  # 2 hours

# ---------------- Database ----------------
try:
    mongo = MongoClient(Config.MONGO_URI)
    # Ping the server to ensure connection is active
    mongo.admin.command('ping')
    logger.info("‚úÖ Connected to MongoDB")
    # Use your existing database (replace 'telegram_bot' if different)
    db = mongo.telegram_bot
    pending = db.pending_applications  # Collection name
    logger.info("‚úÖ Database and collection ready")
except Exception as e:
    logger.error(f"‚ùå Failed to connect to MongoDB: {e}")
    exit(1) # Exit if DB connection fails

# ---------------- Bot Client ----------------
bot = TelegramClient('guard_bot', Config.API_ID, Config.API_HASH)

# ---------------- Messages ----------------
START_MSG = (
    "üõ°Ô∏è ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç **Tamil Novels** ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æø‡Æ©‡Ææ‡Æ≤‡Øç, ‡Æ™‡Æø‡Æ©‡Øç‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æü‡Æø‡Æï‡Æ≥‡Øà ‡Æ™‡Æø‡Æ©‡Øç‡Æ™‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç:\n\n"
    "1. ‡Æá‡Æ®‡Øç‡Æ§ ‡Æ™‡Øã‡Æü‡Øç‡Æü‡Æø‡Æ≤‡Øç ‡Æè‡Æ§‡Øá‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æí‡Æ∞‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø‡ÆØ‡Øà ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç (‡Æé.‡Æï‡Ææ: **Hi**)\n"
    "2. ‡Æ™‡Æø‡Æ©‡Øç‡Æ©‡Æ∞‡Øç ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç: https://t.me/+_1n657JUXHIzODk1  \n"
    "3. ‡Æ™‡Æø‡Æ©‡Øç‡Æ©‡Æ∞‡Øç ‡Æí‡Æ∞‡ØÅ **‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ** ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç.\n\n"
    "‚úÖ ‡Æá‡Æ§‡ØÅ ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà. ‡Æ®‡Æ©‡Øç‡Æ±‡Æø!"
)

WELCOME_MSG = (
    "üëã ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç, {name}!\n\n"
    "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç **Tamil Novels** ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æø‡Æ§‡Øç‡Æ§‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç.\n\n"
    "‚úÖ ‡Æö‡Øá‡Æ∞ ‡Æ™‡Æø‡Æ©‡Øç‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æí‡Æ∞‡ØÅ **‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ** ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç:\n"
    "1. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç, ‡Æ™‡Ææ‡Æ≤‡Æø‡Æ©‡ÆÆ‡Øç\n"
    "2. ‡Æé‡Æô‡Øç‡Æï‡ØÅ ‡Æá‡Æ®‡Øç‡Æ§ ‡Æ≤‡Æø‡Æô‡Øç‡Æï‡Øà ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?\n"
    "3. ‡Æè‡Æ©‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?\n\n"
    "üéôÔ∏è ‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç: ‡Æá‡Æ®‡Øç‡Æ§ **‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Øà ‡Æá‡Æ®‡Øç‡Æ§ ‡Æ™‡Øã‡Æü‡Øç‡Æü‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá** ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç (‡Æ§‡Æ©‡Æø‡ÆØ‡Ææ‡Æ∞‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø‡ÆØ‡Ææ‡Æï).\n"
    "‚è±Ô∏è 2 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ≥‡Øç ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà ‡Æé‡Æ©‡Øç‡Æ±‡Ææ‡Æ≤‡Øç ‡Æ§‡Ææ‡Æ©‡Ææ‡Æï ‡Æ®‡Æø‡Æ∞‡Ææ‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç."
)

REMINDER_MSG = (
    "‚è∞ ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç, {name}!\n\n"
    "‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç **2 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç** ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.\n"
    "‡Æâ‡Æü‡Æ©‡Øá ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà‡ÆØ‡ØÜ‡Æ©‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ∞‡Ææ‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç."
)

APPROVED_MSG = (
    "üéâ ‡Æµ‡Ææ‡Æ¥‡Øç‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç! ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç!\n\n"
    "üìå ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Æ®‡Øç‡Æ§‡Ææ ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æé‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÜ‡Æ§‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡ÆÆ‡Øç: @TamilNovelsPremium\n"
    "üéÅ ‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç: ‡Æï‡Æ§‡Øà ‡ÆÜ‡Æ≤‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ™‡Æ∞‡Æø‡Æö‡ØÅ ‡Æ§‡Øä‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç, ‡Æö‡ØÜ‡Æï‡Øç ‡Æ≤‡Æø‡Æ∏‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç!\n\n"
    "üëâ ‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æö‡ØÜ‡Æ≤‡Øç‡Æ≤‡Æµ‡ØÅ‡ÆÆ‡Øç: https://t.me/c/{group_id_part}/{topic_id}"
)

REJECTED_MSG = "‚ùå ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ∞‡Ææ‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ."

# ---------------- Helpers ----------------
def esc(s):
    s = str(s) if s else "N/A"
    for c in r'\_*[]()~`>#+-=|{}.!':
        s = s.replace(c, f'\\{c}')
    return s

async def log_mod(text):
    try:
        await bot.send_message(Config.MODLOG_CHAT, text, parse_mode='markdown')
        logger.info("‚úÖ Logged to MODLOG_CHAT")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Failed to log to MODLOG_CHAT: {e}")

# ---------------- Voice Analysis ----------------
def is_valid_voice(audio_data):
    if not HAS_AUDIO:
        logger.info("‚ÑπÔ∏è Skipping voice analysis (pydub not available)")
        return True # Accept if analysis is disabled
    try:
        audio = AudioSegment.from_file(io.BytesIO(audio_data), format="ogg")
        duration_ms = len(audio)
        loudness = audio.dBFS
        logger.debug(f"üîä Voice note analysis - Duration: {duration_ms}ms, Loudness: {loudness}dBFS")
        too_short = duration_ms < 4000 # Less than 4 seconds
        too_quiet = loudness < -50 # Too quiet (dBFS is negative, -50 is quite low)
        is_valid = not (too_short or too_quiet)
        if not is_valid:
            logger.info(f"‚ùå Voice note rejected - Too short: {too_short}, Too quiet: {too_quiet}")
        return is_valid
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Audio analysis failed: {e}. Treating as invalid.")
        return False # Reject on analysis error

# ---------------- Handlers ----------------
async def start_bot():
    await bot.start(bot_token=Config.BOT_TOKEN)
    logger.info("üõ°Ô∏è Bot started. Registering handlers...")

    # Handle voice notes in DM
    @bot.on(events.NewMessage(incoming=True, func=lambda e: e.is_private and e.voice))
    async def voice_handler(event):
        user = await event.get_sender()
        if not user:
            logger.warning("‚ùå Could not get sender from voice message")
            return

        logger.info(f"üé§ Received voice note from user {user.id} ({user.first_name})")
        logger.info(f"üîç Checking for pending application for user {user.id}")

        # Check if user has a pending application
        record = pending.find_one({"user_id": user.id, "status": "pending"})
        if not record:
            logger.warning(f"‚ùå No pending application found for {user.id} ({user.first_name})")
            await event.reply("‚ùå ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ£‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.")
            return

        try:
            logger.info(f"üì• Downloading voice note from {user.id}")
            voice_data = await event.download_media(bytes)
            logger.info(f"‚úÖ Voice note downloaded for {user.id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to download voice for {user.id}: {e}")
            await event.reply("‚ùå ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Øà ‡Æ™‡Æ§‡Æø‡Æµ‡Æø‡Æ±‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.")
            return

        if not is_valid_voice(voice_data):
            await event.reply("‚ùå ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡ØÅ‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç.")
            return

        try:
            logger.info(f"üì§ Forwarding voice note from {user.id} to MODLOG_CHAT")
            msg = await event.forward_to(Config.MODLOG_CHAT)
            await event.reply("‚úÖ ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æ™‡ØÜ‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Æø‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æ≥‡Æø‡Æ™‡Øç‡Æ™‡Ææ‡Æ∞‡Øç.")

            # Update database status and store message ID
            pending.update_one(
                {"user_id": user.id},
                {"$set": {"status": "voice_sent", "msg_id": msg.id}}
            )
            logger.info(f"üíæ Updated database for {user.id} to 'voice_sent'")

            # Notify mod group with approve/reject buttons
            await bot.send_message(
                Config.MODLOG_CHAT,
                f"üé§ ‡Æö‡ØÜ‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æ™‡Æü‡Æø‡ÆØ‡Ææ‡Æ© ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ from [{esc(user.first_name)}](tg://user?id={user.id}) (`{user.id}`)",
                buttons=[
                    [Button.inline("‚úÖ Approve", data=f"approve_{user.id}"),
                     Button.inline("‚ùå Reject", data=f"reject_{user.id}")]
                ],
                parse_mode='markdown'
            )
            logger.info(f"‚úÖ Voice from {user.id} forwarded and buttons sent to mod group")
        except Exception as e:
            error_msg = f"‚ùå Failed to forward/process voice for {user.id}: {e}"
            logger.error(error_msg)
            await log_mod(error_msg)

    # Handle user joining the group (ChatAction) - Enhanced Debugging
    @bot.on(events.ChatAction)
    async def chat_action_handler(event):
        # --- Enhanced Debug Logging START ---
        logger.debug(f"üîç === DEBUG ChatAction Event Details ===")
        logger.debug(f"  Event Type: {type(event)}")
        logger.debug(f"  Event Chat ID: {event.chat_id}")
        logger.debug(f"  Event Original Chat ID (if different): {getattr(event, 'original_chat_id', 'N/A')}")
        logger.debug(f"  Event Users: {getattr(event, 'users', 'N/A')}")
        logger.debug(f"  Event User IDs: {getattr(event, 'user_ids', 'N/A')}")
        logger.debug(f"  Event Added By: {getattr(event, 'added_by', 'N/A')}")
        logger.debug(f"  Event Kicked: {getattr(event, 'user_kicked', False)}")
        logger.debug(f"  Event Left: {getattr(event, 'user_left', False)}")
        logger.debug(f"  Event Joined: {getattr(event, 'user_joined', False)}")
        logger.debug(f"  Event Invited: {getattr(event, 'user_invited', False)}") # Newer attribute
        logger.debug(f"  Event Added: {getattr(event, 'user_added', False)}")
        if hasattr(event, 'action_message') and event.action_message:
            logger.debug(f"  Action Message Action Type: {type(event.action_message.action)}")
            logger.debug(f"  Action Message Action Details: {event.action_message.action}")
        logger.debug(f"  Config.GROUP_ID: {Config.GROUP_ID}")
        logger.debug(f"  Match Check (event.chat_id == Config.GROUP_ID): {event.chat_id == Config.GROUP_ID}")
        logger.debug(f"üîç === END DEBUG ChatAction Event Details ===")
        # --- Enhanced Debug Logging END ---

        # Only proceed if it's our target group
        if event.chat_id != Config.GROUP_ID:
            logger.debug(f"‚è≠Ô∏è Skipping ChatAction, not our target group ({Config.GROUP_ID}).")
            return

        logger.info(f"üë• Relevant ChatAction event received for group {event.chat_id}")

        # Check for user joining or being added (cover different join scenarios)
        # Include user_invited which might be relevant for invite links
        if not (event.user_joined or event.user_added or event.user_invited):
             logger.debug("‚è≠Ô∏è Skipping ChatAction, not a join/add/invite event.")
             return

        # Get list of users affected
        users = event.users if event.users else [await event.get_user()] if event.user else []
        logger.info(f"üë• Users involved in ChatAction: {[u.id for u in users if u]}")

        for user in users:
            if not user:
                logger.warning("‚ö†Ô∏è Encountered None user in ChatAction event users list.")
                continue
            logger.info(f"üì• Processing join/add/invite for user: {user.id} ({user.first_name})")

            # Check if the user already has a pending or started record
            existing_record = pending.find_one({"user_id": user.id})
            logger.debug(f"  Existing DB record for {user.id}: {existing_record}")

            # Always update/create the record to mark as pending upon join
            update_data = {
                "first_name": user.first_name,
                "username": user.username,
                "request_time": datetime.now(timezone.utc),
                "status": "pending"
            }
            logger.info(f"üíæ Updating/Creating pending record for {user.id} with  {update_data}")
            pending.update_one(
                {"user_id": user.id},
                {"$set": update_data},
                upsert=True
            )
            logger.info(f"‚úÖ Database record for {user.id} updated to 'pending'.")

            # Send welcome message and start reminder
            try:
                logger.info(f"üì§ Sending WELCOME_MSG to {user.id}")
                await bot.send_message(user.id, WELCOME_MSG.format(name=esc(user.first_name)))
                logger.info(f"‚úÖ Sent welcome DM to {user.id}")
                # Start reminder task
                asyncio.create_task(reminder_task(user.id, user.first_name))
                logger.info(f"‚è±Ô∏è Started reminder task for {user.id}")
            except errors.UserIsBlockedError:
                logger.warning(f"üö´ User {user.id} has blocked the bot. Cannot send welcome message.")
                await log_mod(f"‚ö†Ô∏è DM failed for {user.id} ({user.first_name}): User blocked the bot.")
            except errors.InputUserDeactivatedError:
                logger.warning(f"üíÄ User {user.id} account is deactivated.")
                await log_mod(f"‚ö†Ô∏è DM failed for {user.id} ({user.first_name}): User account deactivated.")
            except Exception as e:
                error_msg = f"‚ùå Failed to DM {user.id} ({user.first_name}): {type(e).__name__}: {e}"
                logger.error(error_msg)
                await log_mod(error_msg)

    # Approval/Rejection callback
    @bot.on(events.CallbackQuery(pattern=r"^(approve|reject)_(\d+)$"))
    async def approve_handler(event):
        if event.sender_id not in Config.ADMINS:
            await event.answer("üö´ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.", alert=True)
            return

        action, user_id_str = event.data.decode().split("_")
        user_id = int(user_id_str)
        logger.info(f"üñ±Ô∏è Admin {event.sender_id} clicked {action} for user {user_id}")
        try:
            user = await bot.get_entity(user_id)
        except Exception as e:
            logger.error(f"‚ùå Failed to get user {user_id}: {e}")
            await event.answer("‚ùå User not found", alert=True)
            return

        if action == "approve":
            try:
                logger.info(f"‚úÖ Approving user {user.id}")
                # Grant view_messages permission (assuming default restrictions)
                await bot.edit_permissions(Config.GROUP_ID, user_id, view_messages=True)
                group_id_part = str(Config.GROUP_ID)[4:] # Remove -100 prefix for link
                await bot.send_message(
                    user_id,
                    APPROVED_MSG.format(
                        name=esc(user.first_name),
                        group_id_part=group_id_part,
                        topic_id=Config.TOPIC_ID
                    )
                )
                pending.update_one({"user_id": user_id}, {"$set": {"status": "approved"}})
                await event.edit(f"‚úÖ Approved user {user.first_name} (`{user.id}`)")
                await log_mod(f"‚úÖ Approved `{user.id}` ‚Äî {esc(user.first_name)}")
                await event.answer("‚úÖ Approved!", alert=True)
            except Exception as e:
                error_msg = f"‚ùå Approval failed for {user.id}: {e}"
                logger.error(error_msg)
                await event.edit(error_msg)
                await event.answer("‚ùå Approval failed", alert=True)
        else: # Reject
            try:
                logger.info(f"‚ùå Rejecting user {user.id}")
                await bot.send_message(user_id, REJECTED_MSG)
                pending.update_one({"user_id": user_id}, {"$set": {"status": "rejected"}})
                await event.edit(f"‚ùå Rejected user {user.first_name} (`{user.id}`)")
                await log_mod(f"‚ùå Rejected `{user.id}` ‚Äî {esc(user.first_name)}")
                await event.answer("‚ùå Rejected!", alert=True)
            except Exception as e:
                error_msg = f"‚ùå Rejection failed for {user.id}: {e}"
                logger.error(error_msg)
                await event.edit(error_msg)
                await event.answer("‚ùå Rejection failed", alert=True)

    # Start command
    @bot.on(events.NewMessage(pattern='/start'))
    async def start(event):
        if event.is_private:
            logger.info(f"üöÄ /start command received from {event.sender_id}")
            await event.reply(
                START_MSG,
                buttons=[[Button.url("üîó ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç", "https://t.me/+_1n657JUXHIzODk1")]]
            )
        # Delete the /start message in group chats (if accidentally sent there)
        if not event.is_private:
             await event.delete()

    # Handle "Hi", "Join", etc. (Initial interaction)
    @bot.on(events.NewMessage(func=lambda e: e.is_private and e.text and e.text.lower().strip() in ['hi', 'hello', 'join', 'start']))
    async def greet(event):
        user = await event.get_sender()
        if not user:
             return
        logger.info(f"üí¨ Greeting trigger received from {user.id}: '{event.text}'")

        # Create or update a 'started' record to track initial contact
        pending.update_one(
            {"user_id": user.id},
            {"$set": {
                "first_name": user.first_name,
                "username": user.username,
                "last_interaction": datetime.now(timezone.utc),
                "status": "started" # Indicate they've started the process
            }},
            upsert=True
        )
        logger.info(f"üíæ Updated/created 'started' record for {user.id}")

        await event.reply(
            "‚úÖ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡ÆØ‡Ææ‡Æ∞‡Ææ‡Æï ‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç!\n\n"
            "‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞ ‡Æµ‡Æø‡Æ£‡Øç‡Æ£‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:\n"
            "https://t.me/+_1n657JUXHIzODk1  \n\n"
            "‡Æ™‡Æø‡Æ©‡Øç‡Æ©‡Æ∞‡Øç ‡Æí‡Æ∞‡ØÅ **‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ** ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æµ‡ØÅ‡ÆÆ‡Øç.",
            buttons=[[Button.url("üîó ‡Æï‡ØÅ‡Æ¥‡ØÅ‡Æµ‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç", "https://t.me/+_1n657JUXHIzODk1")]]
        )

    # Reminder task
    async def reminder_task(user_id, name):
        logger.info(f"‚è±Ô∏è Starting reminder task for user {user_id}")
        await asyncio.sleep(Config.TIMEOUT)
        # Check if the user is still pending
        record = pending.find_one({"user_id": user_id, "status": "pending"})
        if record:
            try:
                logger.info(f"‚è∞ Sending reminder to user {user_id}")
                await bot.send_message(user_id, REMINDER_MSG.format(name=esc(name)))
                logger.info(f"‚úÖ Reminder sent to {user_id}")
            except errors.UserIsBlockedError:
                logger.warning(f"üö´ Reminder failed for {user_id}: User blocked the bot.")
                await log_mod(f"‚ö†Ô∏è Reminder failed for {user_id} ({name}): User blocked the bot.")
            except errors.InputUserDeactivatedError:
                 logger.warning(f"üíÄ Reminder failed for {user_id}: User account deactivated.")
                 await log_mod(f"‚ö†Ô∏è Reminder failed for {user_id} ({name}): User account deactivated.")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Failed to send reminder to {user_id}: {e}")
        else:
            logger.info(f"‚ÑπÔ∏è Reminder task for {user_id} cancelled (status not pending).")

    logger.info("‚úÖ All handlers registered. Bot is live and waiting for events.")
    await bot.run_until_disconnected()

# ---------------- Start ----------------
if __name__ == '__main__':
    # nest_asyncio is generally not needed if running the script directly
    # import nest_asyncio
    # nest_asyncio.apply()
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(start_bot())
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user.")
    except Exception as e:
        logger.critical(f"üí• Fatal error occurred: {e}", exc_info=True)
